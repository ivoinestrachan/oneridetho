generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  photoUrl String?
  dob      DateTime
  email    String    @unique
  rating   Float?    @default(5)
  phone    String?   @unique
  gender   Gender?
  account  Account?
  bookings Booking[]
  rides    Ride[]    @relation("UserRides")
  sessions Session[] @relation("UserSessions")
}

model Account {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  email    String @unique
  password String
  user     User   @relation(fields: [userId], references: [id])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  sessionToken String   @unique
  user         User     @relation("UserSessions", fields: [userId], references: [id])
}

model Booking {
  id         Int      @id @default(autoincrement())
  rideId     Int
  userId     Int
  driverId   Int?
  createdAt  DateTime @default(now())
  isAccepted Boolean?
  driver     Driver?  @relation(fields: [driverId], references: [id])
  ride       Ride     @relation(fields: [rideId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Driver {
  id           Int       @id @default(autoincrement())
  name         String
  photoUrl     String?
  carType      String
  licensePlate String
  rating       Float?    @default(5)
  email        String    @unique
  password     String
  phone        String?   @unique
  carImageUrl  String?
  bookings     Booking[]
  rides        Ride[]    @relation("DriverRides")
}

model Ride {
  id              Int        @id @default(autoincrement())
  pickupTime      DateTime
  dropoffTime     DateTime?
  fare            Float
  tip             Float?     @default(5)
  userId          Int
  driverId        Int
  status          RideStatus
  pickupLocation  Json
  dropoffLocation Json
  passengerCount  Int        @default(1)
  isAccepted      Boolean?
  isConfirmed     Boolean
  paymentMethod   String
  bookings        Booking[]
  driver          Driver     @relation("DriverRides", fields: [driverId], references: [id])
  user            User       @relation("UserRides", fields: [userId], references: [id])
}

model Location {
  id   Int   @id @default(autoincrement())
  lat  Float
  long Float
}

enum Gender {
  Male
  Female
  Other
}

enum RideStatus {
  Requested
  InProgress
  Completed
  Cancelled
}
